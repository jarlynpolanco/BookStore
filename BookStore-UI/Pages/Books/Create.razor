@page "/books/create/"
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IToastService _toastService

<h3>Create a book</h3>
<hr />
<br />
@if (!isSuccess)
{
    _toastService.ShowError("Something went wrong with the creation attempt");
}

<EditForm Model="Model" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="Model.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Authors</label>
        <select @bind="Model.AuthorId" class="form-control" id="author">
            <option value="">-- Select author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.Firstname @author.Lastname</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
    </div>
    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            _toastService.ShowWarning("Please remove the invalid file type and select as new image, or leave this field blank");
        }
        @if (!string.IsNullOrWhiteSpace(imageDataUrl))
        {
            <img src="@imageDataUrl" style="height:100px; width:100px" />
        }
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create a book
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary" type="submit">
        <span class="oi oi-media-skip-backward"></span>
        Back to list
    </button>
</EditForm>

@code {
    private Book Model = new Book();
    private IList<Author> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataUrl;
    private string imageBase64Data;

    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);

    }

    private async Task HandleCreate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                Model.Image = $"{Guid.NewGuid().ToString().Replace("-", string.Empty)}{Path.GetExtension(file.Name)}";
                var isImgUploaded = await _fileUpload.UploadFileAsync(imageBase64Data, Model.Image);
                if (!isImgUploaded)
                {
                    isSuccess = false;
                    return;
                }
            }
            isSuccess = await _bookRepo.Create(Endpoints.BooksEndpoint, Model);

            if (isSuccess)
            {
                _toastService.ShowSuccess("Book was created successfully");
                BackToList();
            }
        }

    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            var name = file.Name;
            if (isValidFile(name))
            {
                using var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                imageBase64Data = Convert.ToBase64String(ms.ToArray());
                imageDataUrl = $"data:image/{Path.GetExtension(name).Replace(".", string.Empty)};base64,{imageBase64Data}";
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataUrl = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private bool isValidFile(string fileName)
    {
        string[] validsExt = { ".jpg", ".png", ".jpeg" };
        return validsExt.Contains(Path.GetExtension(fileName));
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
